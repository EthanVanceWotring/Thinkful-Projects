{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Module 5-Lesson 9 -- Sampling and the Central Limit Theorem\n",
    "\n",
    "##### Assignment\n",
    "\n",
    "\n",
    "Now that you have some code to create your own populations, sample them, and compare the samples to the populations, it's time to experiment. Using your own Jupyter notebook, or a copy of the notebook above, reproduce the pop1 and pop2 populations and samples using numpy's binomial function. Specifically, create two binomially distributed populations with n equal to 10 and size equal to 10000. The p-value of pop1 should be 0.2 and the p-value of pop2 should be 0.5. Using a sample size of 100, calculate the means and standard deviations of your samples.\n",
    "\n",
    "For each of the following tasks, first write what you expect will happen, then code the changes and observe what does happen. Discuss the results with your mentor.\n",
    "\n",
    "1) Increase the size of your samples from 100 to 1000, then calculate the means and standard deviations for your new samples and create histograms for each. Repeat this again, decreasing the size of your samples to 20. What values change, and what remain the same?\n",
    "\n",
    "2) Change the probability value (p in the NumPy documentation) for pop1 to 0.3, then take new samples and compute the t-statistic and p-value. Then change the probability value p for group 1 to 0.4, and do it again. What changes, and why?\n",
    "\n",
    "3) Change the distribution of your populations from binomial to a distribution of your choice. Do the sample mean values still accurately represent the population values?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import packages...\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scipy\n",
    "from scipy.stats import ttest_ind\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#produce pop1(n=10, p=0.2, size=10000), pop2(n=10, p=0.5, size=10000)...\n",
    "pop1 = np.random.binomial(10, 0.2, 10000)\n",
    "pop2 = np.random.binomial(10, 0.5, 10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.02\n",
      "5.11\n",
      "1.2804686642007295\n",
      "1.5867892109539943\n"
     ]
    }
   ],
   "source": [
    "#using a sample size of 100, calculate the means and standard deviation of samples...\n",
    "sample1 = np.random.choice(pop1, 100, replace=True)\n",
    "sample2 = np.random.choice(pop2, 100, replace=True)\n",
    "\n",
    "print(sample1.mean())\n",
    "print(sample2.mean())\n",
    "print(sample1.std())\n",
    "print(sample2.std())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each of the following tasks, first write what you expect will happen, then code the changes and observe what does happen."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Question 1:\n",
    "Increase the size of your samples from 100 to 1000, then calculate the means and standard deviations for your new samples and create histograms for each. Repeat this again, decreasing the size of your samples to 20. What values change, and what remain the same?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I expect that increasing the samples from 100 to 1000 will not cause the means to change but will maybe decrease the standard deviations. I then expect that decreasing the samples to 20 will again not change the means and might increase the standard deviations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.933\n",
      "4.933\n",
      "1.1901726765473992\n",
      "1.5964056502029802\n"
     ]
    }
   ],
   "source": [
    "#sample size 1000...\n",
    "_1_sample1 = np.random.choice(pop1, 1000, replace=True)\n",
    "_1_sample2 = np.random.choice(pop2, 1000, replace=True)\n",
    "\n",
    "print(_1_sample1.mean())\n",
    "print(_1_sample2.mean())\n",
    "print(_1_sample1.std())\n",
    "print(_1_sample2.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot _1_sample1 and _1_sample2 with a histogram...\n",
    "#Compute the mean and standard deviation and plot them as vertical lines on the histogram\n",
    "plt.hist(_1_sample1, alpha=0.5, label='sample 1') \n",
    "plt.hist(_1_sample2, alpha=0.5, label='sample 2') \n",
    "plt.legend(loc='upper right') \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.2\n",
      "5.4\n",
      "1.2489995996796797\n",
      "1.7146428199482247\n"
     ]
    }
   ],
   "source": [
    "#sample size 20...\n",
    "_2_sample1 = np.random.choice(pop1, 20, replace=True)\n",
    "_2_sample2 = np.random.choice(pop2, 20, replace=True)\n",
    "\n",
    "print(_2_sample1.mean())\n",
    "print(_2_sample2.mean())\n",
    "print(_2_sample1.std())\n",
    "print(_2_sample2.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAW4AAAD8CAYAAABXe05zAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAEb1JREFUeJzt3X2MXXWdx/H3t0zLWAS7aWcN2M5OMbRWWylkgLI1hAenC1sCGwMJjTWu2XVQFwLdFbQbk0WDISYE3D8Q0/DQbsSqVJpgwxaKlACGhz7Iw0CBIFtgRG2pcbE84373j7mDQ512zszc23t/7fuVTJg799zf+czNzIfT3/mdM5GZSJLKMaHZASRJo2NxS1JhLG5JKozFLUmFsbglqTAWtyQVxuKWpMJY3JJUGItbkgrT1ohBp02bll1dXY0YWpIOSFu2bHklMzuqbNuQ4u7q6mLz5s2NGFqSDkgR8ULVbZ0qkaTCWNySVBiLW5IK05A5bkkHrnfeeYf+/n7efPPNZkcpUnt7O9OnT2fixIljHsPiljQq/f39HH744XR1dRERzY5TlMxk165d9Pf3M3PmzDGPM+JUSUTMjohHh3y8GhGXjnmPkor25ptvMnXqVEt7DCKCqVOnjvtfKyMecWfmM8D82k4PAX4NrB3XXiUVzdIeu3q8d6M9OXkG8KvMrLzeUJJUX6Od474AWN2IIJLKdO2GZ+s63rKeWXUdb7xOPfVUrr76arq7uyttf+utt3LFFVewbds2HnnkkcqvG43KxR0Rk4BzgOV7eb4X6AXo7OysSziVq56/zK32iyzty9y5c7ntttu48MILG7aP0UyVnAVszczfDfdkZq7IzO7M7O7oqHS5vSSN2muvvcbixYs59thjmTt3Lj/+8Y8B+Na3vsUJJ5zA3Llz6e3tJTOBgSPmZcuWccoppzBnzhw2bdrEZz7zGY455hi+8Y1vALB9+3Y+9rGP8fnPf55PfvKTnHfeebz++ut/se+77rqLk08+meOPP57zzz+f3bt3/8U2c+bMYfbs2Q18B0ZX3EtwmkRSk61fv56jjjqKxx57jL6+Ps4880wALrroIjZt2kRfXx9vvPEG69ate+81kyZN4r777uNLX/oS5557Ltdddx19fX2sXLmSXbt2AfDMM8/Q29vL448/zhFHHMH3vve99+33lVde4corr+Tuu+9m69atdHd3c8011+y/b3yISsUdEZOBHuC2xsaRpH2bN28ed999N1/72te4//77+dCHPgTAxo0bOemkk5g3bx733HMPTz755HuvOeecc9577Sc+8QmOPPJIDj30UI4++mheeuklAGbMmMHChQsBWLp0KQ888MD79vvQQw/x1FNPsXDhQubPn8+qVat44YXmrNOoNMedma8DUxucRZJGNGvWLLZs2cIdd9zB8uXLWbRoEZdffjlf+cpX2Lx5MzNmzOCKK65431rpQw89FIAJEya89/ng43fffRf4y2V6ez7OTHp6eli9uvkTD96rRFJRXn75ZSZPnszSpUv56le/ytatW98r6WnTprF7927WrFkz6nFffPFFHnzwQQBWr17Npz71qfc9v2DBAn7xi1/w3HPPAfD666/z7LP1XVFTlZe8SxqX/b3q54knnuCyyy5jwoQJTJw4keuvv54pU6bwxS9+kXnz5tHV1cUJJ5ww6nHnzJnDqlWruPDCCznmmGP48pe//L7nOzo6WLlyJUuWLOGtt94C4Morr2TWrPd//2vXruXiiy9m586dLF68mPnz53PnnXeO/RseRgyeea2n7u7u9A8pHNxcDnjg2rZtG3PmzGl2jLravn07Z599Nn19fftlf8O9hxGxJTMrLfp2qkSSCmNxSzrodXV17bej7XqwuCWpMBa3JBXG4pakwljcklQY13FLGp+NV9V3vNOGvQFp04z2tq6XXXYZP/vZz5g0aRIf/ehHufnmm5kyZUpdM3nELUl11NPTQ19fH48//jizZs3iqqvq/D82LG5JhWn127ouWrSItraByYwFCxbQ399f9/fA4pZUlJJu63rTTTdx1lln1fkdsLglFaaU27p++9vfpq2tjc9+9rN1/f7Bk5OSClPCbV1XrVrFunXr+PnPf16Xv+q+J4+4JRWl1W/run79er7zne9w++23M3ny5FHnqMIjbknjs5+X77X6bV0vuugi3nrrLXp6eoCBwv/+978/xu92eN7WVQ3hbV0PXN7Wdfy8raskHWQsbkkHPW/rKumA14gp1oNFPd67SsUdEVMiYk1EPB0R2yLi5HHvWVKR2tvb2bVrl+U9BpnJrl27aG9vH9c4VVeV/CewPjPPi4hJQGPWuEhqedOnT6e/v5+dO3c2O0qR2tvbmT59+rjGGLG4I+II4BTg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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot _1_sample1 and _1_sample2 with a histogram...\n",
    "#Compute the mean and standard deviation and plot them as vertical lines on the histogram\n",
    "plt.hist(_2_sample1, alpha=0.5, label='sample 1') \n",
    "plt.hist(_2_sample2, alpha=0.5, label='sample 2') \n",
    "plt.legend(loc='upper right') \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Question 2:\n",
    "Change the probability value (p in the NumPy documentation) for pop1 to 0.3, then take new samples and compute the t-statistic and p-value. Then change the probability value p for group 1 to 0.4, and do it again. What changes, and why?\n",
    "\n",
    "I expect that causing the p-values to be closer in value will cause the difference in the means of the two populations to be even more close in value as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#produce _2_pop1(n=10, p=0.3, size=10000), _2_pop2(n=10, p=0.4, size=10000)...\n",
    "_2_pop1 = np.random.binomial(10, 0.2, 10000)\n",
    "_2_pop2 = np.random.binomial(10, 0.4, 10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using a sample size of 100, calculate the means and standard deviation of samples...\n",
    "_2_sample1 = np.random.choice(_2_pop1, 100, replace=True)\n",
    "_2_sample2 = np.random.choice(_2_pop2, 100, replace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.92\n",
      "3.78\n",
      "1.2464349160706305\n",
      "1.5005332385522154\n"
     ]
    }
   ],
   "source": [
    "print(_2_sample1.mean())\n",
    "print(_2_sample2.mean())\n",
    "print(_2_sample1.std())\n",
    "print(_2_sample2.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ttest_indResult(statistic=9.487281732095015, pvalue=9.57833398504647e-18)\n"
     ]
    }
   ],
   "source": [
    "#compute t-stat and p-value...\n",
    "from scipy.stats import ttest_ind\n",
    "print(ttest_ind(_2_sample2, _2_sample1, equal_var=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Question 3:\n",
    "\n",
    "Change the distribution of your populations from binomial to a distribution of your choice. Do the sample mean values still accurately represent the population values?\n",
    "\n",
    "I am changing the distribution to a logseries distribution. The sample mean and other values do not hold value in representing the sample population values anymore."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#produce _2_pop1(n=10, p=0.3, size=10000), _2_pop2(n=10, p=0.4, size=10000)...\n",
    "_3_pop1 = np.random.logseries(0.2, 10000)\n",
    "_3_pop2 = np.random.logseries(0.4, 10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using a sample size of 100, calculate the means and standard deviation of samples...\n",
    "_3_sample1 = np.random.choice(_3_pop1, 100, replace=True)\n",
    "_3_sample2 = np.random.choice(_3_pop2, 100, replace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.12\n",
      "1.24\n",
      "0.4308131845707603\n",
      "0.5499090833947009\n"
     ]
    }
   ],
   "source": [
    "print(_3_sample1.mean())\n",
    "print(_3_sample2.mean())\n",
    "print(_3_sample1.std())\n",
    "print(_3_sample2.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ttest_indResult(statistic=1.7091844474514242, pvalue=0.08907333271423305)\n"
     ]
    }
   ],
   "source": [
    "#compute t-stat and p-value...\n",
    "from scipy.stats import ttest_ind\n",
    "print(ttest_ind(_3_sample2, _3_sample1, equal_var=False))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
